import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def read_schedule(file_path: str):
    df = pd.read_excel(file_path)
    return df

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)
def get_week_type():
    current_date = datetime.datetime.now()
    week_number = current_date.isocalendar()[1]
    return "—á–µ—Ç–Ω–∞—è" if week_number % 2 == 0 else "–Ω–µ—á–µ—Ç–Ω–∞—è"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –≤ —Ä—É—Å—Å–∫–∏–µ
WEEKDAYS = {
    0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: '–≤—Ç–æ—Ä–Ω–∏–∫',
    2: '—Å—Ä–µ–¥–∞',
    3: '—á–µ—Ç–≤–µ—Ä–≥',
    4: '–ø—è—Ç–Ω–∏—Ü–∞',
    5: '—Å—É–±–±–æ—Ç–∞',
    6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_keyboard():
    keyboard = [
        [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today
async def today_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    week_type = get_week_type()
    current_day = WEEKDAYS[datetime.datetime.now().weekday()]
    
    schedule_df = read_schedule('schedule.xlsx')
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    schedule_df['–ù–µ–¥–µ–ª—è'] = schedule_df['–ù–µ–¥–µ–ª—è'].str.lower()
    schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].str.lower()
    
    today_schedule = schedule_df[
        (schedule_df['–ù–µ–¥–µ–ª—è'] == week_type) & 
        (schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == current_day)
    ]
    
    if today_schedule.empty:
        await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")
    else:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({current_day}, {week_type} –Ω–µ–¥–µ–ª—è):\n\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today_schedule = today_schedule.sort_values('–í—Ä–µ–º—è')
        for _, row in today_schedule.iterrows():
            response += f"üïê {row['–í—Ä–µ–º—è']}\n"
            response += f"üìö {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
            response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n\n"
        
        await update.message.reply_text(response)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def full_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule_df = read_schedule('schedule.xlsx')
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ '–ù–µ–¥–µ–ª—è' –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    schedule_df['–ù–µ–¥–µ–ª—è'] = schedule_df['–ù–µ–¥–µ–ª—è'].str.lower()
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏' –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].str.lower()
    
    response = "üìö –ü–û–õ–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï:\n\n"
    
    for week_type in ['—á–µ—Ç–Ω–∞—è', '–Ω–µ—á–µ—Ç–Ω–∞—è']:
        response += f"=== {week_type.upper()} –ù–ï–î–ï–õ–Ø ===\n\n"
        week_schedule = schedule_df[schedule_df['–ù–µ–¥–µ–ª—è'] == week_type]
        
        for day in ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']:
            day_schedule = week_schedule[week_schedule['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == day]
            
            if not day_schedule.empty:
                response += f"üìÖ {day.upper()}:\n"
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                day_schedule = day_schedule.sort_values('–í—Ä–µ–º—è')
                for _, row in day_schedule.iterrows():
                    response += f"üïê {row['–í—Ä–µ–º—è']}\n"
                    response += f"üìö {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
                    response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n\n"
                response += "---------------\n"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await today_schedule(update, context)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await full_schedule(update, context)

def main():
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token('7660329675:AAHFxjjHYZyHoP2hZbjWqLvLVwLhU2WlAjQ').build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("today", today_schedule))
    application.add_handler(CommandHandler("full", full_schedule))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
