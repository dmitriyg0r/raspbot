import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, JobQueue
import datetime
import os
from dotenv import load_dotenv
import logging
from datetime import datetime, timedelta, time, timezone
import pytz  # –¥–æ–±–∞–≤–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def read_schedule(file_path: str):
    try:
        df = pd.read_excel(file_path)
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        return pd.DataFrame()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)
def get_week_type():
    current_date = datetime.now()
    week_number = current_date.isocalendar()[1]
    return "—á–µ—Ç–Ω–∞—è" if week_number % 2 == 0 else "–Ω–µ—á–µ—Ç–Ω–∞—è"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –≤ —Ä—É—Å—Å–∫–∏–µ
WEEKDAYS = {
    0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: '–≤—Ç–æ—Ä–Ω–∏–∫',
    2: '—Å—Ä–µ–¥–∞',
    3: '—á–µ—Ç–≤–µ—Ä–≥',
    4: '–ø—è—Ç–Ω–∏—Ü–∞',
    5: '—Å—É–±–±–æ—Ç–∞',
    6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_keyboard():
    keyboard = [
        [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today
async def today_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    week_type = get_week_type()
    current_day = WEEKDAYS[datetime.datetime.now().weekday()]
    
    schedule_df = read_schedule('schedule.xlsx')
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    schedule_df['–ù–µ–¥–µ–ª—è'] = schedule_df['–ù–µ–¥–µ–ª—è'].str.lower()
    schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].str.lower()
    
    today_schedule = schedule_df[
        (schedule_df['–ù–µ–¥–µ–ª—è'] == week_type) & 
        (schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == current_day)
    ]
    
    if today_schedule.empty:
        await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")
    else:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({current_day}, {week_type} –Ω–µ–¥–µ–ª—è):\n\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today_schedule = today_schedule.sort_values('–í—Ä–µ–º—è')
        for _, row in today_schedule.iterrows():
            response += f"üïê {row['–í—Ä–µ–º—è']}\n"
            response += f"üìö {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
            response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n\n"
        
        await update.message.reply_text(response)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def full_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule_df = read_schedule('schedule.xlsx')
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ '–ù–µ–¥–µ–ª—è' –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    schedule_df['–ù–µ–¥–µ–ª—è'] = schedule_df['–ù–µ–¥–µ–ª—è'].str.lower()
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏' –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].str.lower()
    
    response = "üìö –ü–û–õ–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï:\n\n"
    
    for week_type in ['—á–µ—Ç–Ω–∞—è', '–Ω–µ—á–µ—Ç–Ω–∞—è']:
        response += f"=== {week_type.upper()} –ù–ï–î–ï–õ–Ø ===\n\n"
        week_schedule = schedule_df[schedule_df['–ù–µ–¥–µ–ª—è'] == week_type]
        
        for day in ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']:
            day_schedule = week_schedule[week_schedule['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == day]
            
            if not day_schedule.empty:
                response += f"üìÖ {day.upper()}:\n"
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                day_schedule = day_schedule.sort_values('–í—Ä–µ–º—è')
                for _, row in day_schedule.iterrows():
                    response += f"üïê {row['–í—Ä–µ–º—è']}\n"
                    response += f"üìö {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
                    response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n\n"
                response += "---------------\n"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(response)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async def tomorrow_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ datetime
    tomorrow = datetime.now() + timedelta(days=1)
    tomorrow_weekday = WEEKDAYS[tomorrow.weekday()]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏
    week_type = get_week_type()
    # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è
    if datetime.now().weekday() == 6:  # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        week_type = "—á–µ—Ç–Ω–∞—è" if week_type == "–Ω–µ—á–µ—Ç–Ω–∞—è" else "–Ω–µ—á–µ—Ç–Ω–∞—è"
    
    schedule_df = read_schedule('schedule.xlsx')
    schedule_df['–ù–µ–¥–µ–ª—è'] = schedule_df['–ù–µ–¥–µ–ª—è'].str.lower()
    schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].str.lower()
    
    tomorrow_schedule = schedule_df[
        (schedule_df['–ù–µ–¥–µ–ª—è'] == week_type) & 
        (schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == tomorrow_weekday)
    ]
    
    if tomorrow_schedule.empty:
        await update.message.reply_text("–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")
    else:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_weekday}, {week_type} –Ω–µ–¥–µ–ª—è):\n\n"
        tomorrow_schedule = tomorrow_schedule.sort_values('–í—Ä–µ–º—è')
        for _, row in tomorrow_schedule.iterrows():
            response += f"üïê {row['–í—Ä–µ–º—è']}\n"
            response += f"üìö {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
            response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n\n"
        
        await update.message.reply_text(response)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await today_schedule(update, context)
    elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        await tomorrow_schedule(update, context)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await full_schedule(update, context)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async def send_schedule_to_channel(context: ContextTypes.DEFAULT_TYPE):
    try:
        channel_id = os.getenv('CHANNEL_ID')
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {channel_id}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ datetime
        tomorrow = datetime.now() + timedelta(days=1)
        tomorrow_weekday = WEEKDAYS[tomorrow.weekday()]
        
        week_type = get_week_type()
        if datetime.now().weekday() == 6:
            week_type = "—á–µ—Ç–Ω–∞—è" if week_type == "–Ω–µ—á–µ—Ç–Ω–∞—è" else "–Ω–µ—á–µ—Ç–Ω–∞—è"
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {tomorrow_weekday}, {week_type} –Ω–µ–¥–µ–ª—è")
        
        schedule_df = read_schedule('schedule.xlsx')
        schedule_df['–ù–µ–¥–µ–ª—è'] = schedule_df['–ù–µ–¥–µ–ª—è'].str.lower()
        schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].str.lower()
        
        tomorrow_schedule = schedule_df[
            (schedule_df['–ù–µ–¥–µ–ª—è'] == week_type) & 
            (schedule_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == tomorrow_weekday)
        ]
        
        if tomorrow_schedule.empty:
            message = "–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
        else:
            message = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_weekday}, {week_type} –Ω–µ–¥–µ–ª—è):\n\n"
            tomorrow_schedule = tomorrow_schedule.sort_values('–í—Ä–µ–º—è')
            for _, row in tomorrow_schedule.iterrows():
                message += f"üïê {row['–í—Ä–µ–º—è']}\n"
                message += f"üìö {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
                message += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: {row['–ö–∞–±–∏–Ω–µ—Ç']}\n\n"
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª")
        await context.bot.send_message(chat_id=channel_id, text=message)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

async def test_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await send_schedule_to_channel(context)
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

def main():
    application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_date = datetime.now(moscow_tz)
    target_time = time(hour=20, minute=0)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    moscow_time = moscow_tz.localize(datetime.combine(current_date, target_time))
    utc_time = moscow_time.astimezone(pytz.UTC).time()
    
    job_queue = application.job_queue
    job_queue.run_daily(
        send_schedule_to_channel,
        time=utc_time,
        days=(0,1,2,3,4,5,6),
        name='daily_schedule'
    )
    
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {target_time} –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC: {utc_time})")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_send))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("today", today_schedule))
    application.add_handler(CommandHandler("tomorrow", tomorrow_schedule))
    application.add_handler(CommandHandler("full", full_schedule))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    application.add_handler(CommandHandler("send_schedule", send_schedule_to_channel))
    
    application.run_polling()

if __name__ == '__main__':
    main()
